{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Report staging","text":"<p>Project: Data assembly and cleaning Of NMCP Yemen and automating the workflow</p>"},{"location":"#report","title":"Report","text":""},{"location":"#1-abstract","title":"1. Abstract","text":"<p>This report describes the process of consilidationg and mapping the data of National Malaria Control program into structured format the can be easily quired and analyzed</p> <p>despite the differences in codes and names between the different datasets. The report discusses the challenges involved in each task and the strategies employed to address them. The report concludes with a summary of the findings and recommendations for future work.</p> <p>We Will start By Defining the Available Data Sources and Activities. Then We will Go through the data review and cleaning process and provide the methods used and the result of Each reviewing iteration.</p> <p>The Data cleaning and reviewing process will be automated (python code and other data integration and transformation tools) and manual by the team of this project.</p> <p>Designing an integration pipe lines that merge data without repeating ourselves whenever we made changes to the Data. The Codes and Data Integration and Transformation Files are shared on the GitHub Page.</p>"},{"location":"#objectives-the-project","title":"objectives the project","text":"<p>The main objective is mapping all their activity data into a structured format for easy analysis. which will involve:</p> <ol> <li> <p>Creating the Dimension or Master Lists tables dimension tables are frequently referenced entities that are referenced by the NMCP's activities data, Which include:</p> </li> <li> <p>2.1 Villages List Master Table.</p> </li> <li>2.2 Health Facilities Merged Master List (HFs).</li> <li> <p>2.3 Community Health Volunteers List (CHVs).</p> </li> <li> <p>Review, Clean and merge the Data of each data source insuring they connect to the Masters List they are referencing.</p> </li> <li>Develop data visualization tools: Create dashboards and reports to visualize trends, analyze intervention effectiveness, and track progress towards malaria control goals.</li> </ol> <p>The Final resulted Data mapping structure will have the following structure:</p> <pre><code>erDiagram\n  DISTRICT ||--o{ HEALTH-FACILITY : \"Administrative level of one or more\"\n  DISTRICT ||--o{ VILLAGES-LOCATION : \"Administrative level of one or more\"\n  HEALTH-FACILITY ||--o{ CHV : \"Supervises one or more\"\n  HEALTH-FACILITY ||--o{ MALARIA-CASES-REPORT : \"submits one or more\"\n  CHV ||--|{ CHV-MALARIA-CASES-REPORT : \"submits one or more\"\n  VILLAGES-LOCATION ||--o{ ITN-REPORT : \"Has one or more\"\n  VILLAGES-LOCATION ||--o{ IRS-REPORT : \"Has one or more\"</code></pre> <p>A structure which would enables us to:</p> <ul> <li>Have Easy and real time Access to data anytime about any entity when all activities and data collection are linked to this organizational hierarchy.</li> <li>Have a stored data about all entities NMCP involve with such as people, patients, beneficiaries of NMCP's different  activities... etc.</li> <li>Have a historical records of Personnel involved and in implementing NMCP activities, such as vector control of teams, data collectors, and educators ...etc. which will make it easier to analyzing their performances in all activities they are participating in.</li> <li>Easily Brows the summaries and historical data activities per entity (i.e access certain location historical data about ITNs distribution, breading sites, or any malaria relevant data to that locationm).</li> <li>Easily assess and improve intervention targeting, resource allocation, and program monitoring.</li> </ul> <p>Project Data Processing Workflow (local and online database, for collaboration between this project team and to manage and test any new edits to the data before merging to the production database)</p> <pre><code>Work flow chart Will be here\n</code></pre>"},{"location":"#1-defining-activities-and-data-sources","title":"1 Defining Activities and Data sources","text":"<p>Some NMCP activities Data was submitted using the unique codes of the master entity in the master list which make them easy to map, but there are activities that were collected not using the code of the Subjects (Village code, Health Facility code) on those master lists.</p> <p>Most of these activities are done directly by NMCP staff per targeted entity (location/health facility...etc). These Activities are done periodically in a mass campaign that is planned and executed in a specific span of time (i.e 6 days, 11 days).</p>"},{"location":"#11-insecticide-treated-nets-itns-data","title":"1.1 Insecticide Treated Nets (ITNs) Data","text":"<p>ITNs Distribution is done directly by NMCP per Location from house to house in a mass distribution campaign that takes a certain planned time i.e 6 days, 11 days...</p> <pre><code>later we need to add the issues the and more Outlining for this data source\n</code></pre>"},{"location":"#12-indoor-residual-spraying-irs-data","title":"1.2 Indoor residual spraying (IRS) Data","text":"<p>IRS is done directly by NMCP per Location from house to house in a mass Spraying campaign for a population in multiple planned villages and it takes a certain planned time i.e 6 days, 11 days...</p> <pre><code>later we need to add the issues the and more Outlining for this data source\n</code></pre>"},{"location":"#13-larval-source-management-lsm-data","title":"1.3 Larval source management (LSM) Data","text":"<p>per Location done by regional Malaria Units in monthly in different villages withing the administration of the malaria unit.</p> <pre><code>later we need to add the issues the and more Outlining for this data source\n</code></pre>"},{"location":"#14-supply-of-rdts-and-amd-data","title":"1.4 Supply of RDTs and AMD Data","text":"<p>Periodically supply Date of rapid diagnostic tests (RDTs) and antimalarial drugs (AMD) to Health facility warehouses so their health-facility care workers have sufficient stocks to diagnose and treat cases all year: done by nmcp staff in a mass camping targeting most Health Facilities in the country.</p> <pre><code>later we need to add the issues the and more Outlining for this data source\n</code></pre>"},{"location":"#11-community-health-volunteers-chvs-data","title":"1.1 community health Volunteers (CHVs) Data","text":"<p>Engaging CHVs to promote adoption of preventive measures, and diagnose and treat cases in remote Areas. CHVs submit their data of Malaria cases diagnoses treatment and education session monthly. we have data of 3 years we need to work on in this mapping project.</p> <pre><code>later we need to add the issues the and more Outlining for this data source\n</code></pre>"},{"location":"#11-malaria-cases-data","title":"1.1 Malaria Cases Data","text":"<p>from health facilities (HFs) are submitted on weekly basis per HF</p> <p>Outline the specific data sources you will be usingL, This helps readers understand the limitations and strengths of your analysis</p> <pre><code>later we need to add the issues the and more Outlining for this data source\n</code></pre>"},{"location":"#2-creating-the-dimension-tables-or-the-master-lists","title":"2 Creating the Dimension tables or The Master Lists","text":"<p>dimension tables are frequently referenced entities that are referenced by the NMCP's activities data, Which include:</p>"},{"location":"#21-villages-list-master-table","title":"2.1 Villages List Master Table","text":"<p>Provided by External Country Geographic Office</p>"},{"location":"#22-health-facilities-merged-master-list-hfs","title":"2.2 Health Facilities Merged Master List (HFs)","text":"<p>After creating it, we need to map each HF to its catchment Area in the Villages list.</p>"},{"location":"#23-community-health-volunteers-list-chvs","title":"2.3 Community Health Volunteers List (CHVs)","text":"<p>After Creating the list each CHV needs to be mapped to her village in the villages list.</p>"},{"location":"#2-review-clean-and-merge","title":"2 Review, Clean and merge","text":"<p>Review, Clean and merge of the Data insuring they connect to the Masters List they are referencing.</p> <p>Each Data Source reviewing process is done in iteration with each iteration having it's result summary. The reviewing process may be through code and integration code and further reviewed manually for what can't be done in code.</p>"},{"location":"#21-review-of-itns-data","title":"2.1 Review of ITNs Data","text":""},{"location":"#22-review-of-irs-data","title":"2.2 Review of IRS Data","text":""},{"location":"#23-review-of-malaria-cases-data","title":"2.3 Review of Malaria Cases Data","text":"<p>Merging Malaria Cases Data 2011-2016 of the old System with the data of 2017 and upward</p>"},{"location":"#24-review-of-chvs-data","title":"2.4 Review of CHVs Data","text":""},{"location":"#25-review-of-larval-source-management-data","title":"2.5 Review of Larval source management Data","text":""},{"location":"#random-notes","title":"Random Notes","text":"<p>Surveillance Systems: Routine Health Information System Sentinel Site Surveillance</p> <p>Hfs without Owner Public/Private</p> <p>From UNIT I -Data and Data Collection.ppt</p> <p>Key Factors for High Quality Experimental</p> <ul> <li> <p>Data should not be contaminated by poor measurement or errors in procedure.</p> </li> <li> <p>Eliminate confounding variables from study or minimize effects on variables.</p> </li> <li>Representativeness: Does your sample represent the population you are studying? Must use random sample techniques.</li> </ul> <p>how data is acquired, saved, distributed, and analyzed. To benefit from the data optimally</p> <p>Workflow:</p> <ul> <li>Establish the necessary databases, tools, and platforms for data processing.</li> <li>Automated Integration: Utilize automated tools (e.g., Python scripts, ETL processes) to integrate data into a unified format.</li> <li>How would the metadata catalog specifying the characteristics of each dataset look like</li> <li>Establish a feedback mechanism for continuous improvement.</li> <li>Schedule regular reporting cycles to analyze data trends and performance</li> <li>Metadata Catalog: Create a metadata catalog specifying the characteristics of each dataset.</li> </ul>"},{"location":"additional-data/","title":"Additional Data","text":""},{"location":"additional-data/#diagrams","title":"Diagrams","text":"<p>Bellow are Visuals that depict the data processing workflow, master list structures, Pentaho integration Work flow and relationships between datasets.</p> <ul> <li>Final Structure of main Tables:</li> </ul> <pre><code>erDiagram\n  DISTRICT ||--o{ HEALTH-FACILITY : \"Administrative level of one or more\"\n  DISTRICT ||--o{ VILLAGES-LOCATION : \"Administrative level of one or more\"\n  HEALTH-FACILITY ||--o{ VILLAGES-LOCATION : \"Administrative level of one or more\"\n  HEALTH-FACILITY ||--o{ CHV : \"Supervises one or more\"\n  HEALTH-FACILITY ||--o{ MALARIA-CASES-REPORT : \"submits one or more\"\n  CHV ||--|{ CHV-MALARIA-CASES-REPORT : \"submits one or more\"\n  VILLAGES-LOCATION ||--o{ ITN-REPORT : \"Has one or more\"\n  VILLAGES-LOCATION ||--o{ IRS-REPORT : \"Has one or more\"</code></pre> <ul> <li> <p>Fetch data from KoboToolBox into a Temporary Table pipeline: </p> </li> <li> <p>Health Facilities merge and remove duplicates: </p> </li> <li> <p>Anti-Malaria Drugs merge workflow: Multiple steps merged into one picture</p> </li> </ul> <p></p> <p>Work flow 2:</p> <p></p> <ul> <li>Master list re-import into database workflow: After manual review</li> </ul> <p></p> <ul> <li>Catchment Merge workflow:</li> </ul> <p></p> <ul> <li> <p>verifications of Newly added catchments:</p> <ul> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ul> </li> </ul>"},{"location":"additional-data/#tables","title":"Tables","text":"<p>Bellow are Summaries for data quality metrics, such as completeness rates and error rates, for each dataset and stage of the process.</p> <p>Final Status oF Data: as of June, 24 2023</p> <p>The following table shows NORTH/SOUTH Health Facilities that have some data in the north files and needs either be mapped to catchments localities or locate their GPS coordinate:</p> <p> Final Health Facilities Mapping &amp; GPS status</p> hf_owner - WITH NO CATCHMENTS WITH NO CATCHMENT &amp; GPS WITH NO GPS OTHER 292 PRIVATE 574 111 PUBLIC 4692 848 291 1 <p>There are currently 118234 120982 locations in total, of which 105855: 89% 110898: 91% have been mapped to a health facility in the <code>md_health_facilities.csv</code> master file.</p> <p> Final CMs Mapping status</p> S/N gov_id gov % MAPPED UNMAPPED NORTH 11 Ibb 16497 NORTH 17 Hajjah 14416 NORTH 20 Dhamar 14219 NORTH/SOUTH 18 Al Hudaydah 9508 NORTH 23 Sana'a 7504 1 NORTH 22 Sa'ada 6992 NORTH 31 Raymah 6766 NORTH 29 Amran 6421 NORTH 16 Al Jawf 2650 NORTH 27 Al Mahwit 4788 29 NORTH/SOUTH 26 Marib 2181 213 NORTH 13 Amanat Al Asimah 5736 773 NORTH/SOUTH 15 Taizz 9574 9068 NORTH/SOUTH 14 Al Bayda 3646 <p>Join status between reports and catchments:</p> <ul> <li>ITNs Reports: <code>rd_itns_data.csv</code> \u2192 <code>md_catchment_locations.csv</code></li> </ul> <p> Final ITN's Records Mapping status </p> Total linked unlinked (IDPs Camps) unlinked Other 50735 records 49806 155 774 <ul> <li>IRS Reports: <code>rd_irs_data.csv</code> \u2192 <code>md_catchment_locations.csv</code></li> </ul> <p>  Final IRS Records Mapping status </p> <p> After IRS 2022 data was Included </p> Total linked unlinked (IDPs Camps) unlinked Other 41108 records 39791 154 1163"},{"location":"additional-data/#code-snippets","title":"Code Snippets","text":"<p>Bellow are Examples of key data cleaning and transformation techniques</p> <ul> <li> <p>Code of checking for duplicates in Health Facility lists</p> </li> <li> <p>Libraries Import:</p> <ul> <li><code>pandas</code>: For data manipulation and analysis.</li> <li><code>langdetect</code>: To detect the language of a given text.</li> <li><code>googletrans</code>: An unofficial library that uses Google Translate.</li> <li><code>polyglot</code>: Multilingual text processing library, used here for transliteration.</li> <li><code>fuzzywuzzy</code>: For fuzzy string matching.</li> </ul> </li> <li> <p>Language Processing Tools Initialization:</p> <ul> <li>The script downloads language resources for transliteration (<code>transliteration2.ar</code>) from <code>polyglot</code>.</li> </ul> </li> <li> <p>Constants and Mappings:</p> <ul> <li><code>MIN_TEXT_LENGTH</code>: A minimum length for text to be considered for language detection and transliteration.</li> <li><code>THRESHOLD</code>: The threshold for fuzzy matching.</li> <li><code>mapped_words</code>: A dictionary mapping Arabic health facility names to their English abbreviations or translations.</li> </ul> </li> <li> <p>Function Definitions:</p> <ul> <li><code>detect_language(text)</code>: Detects the language of the given text. If the text is too short or language detection fails, it returns <code>None</code>.</li> <li><code>transliterate_text(text, language, primary_language='en')</code>: Transliterates the text to English if it's not in the primary language and handles specific word mappings for healthcare-related terms.</li> <li><code>fuzzy_match(row, col1, col2, threshold)</code>: Performs fuzzy matching between two columns in a dataframe row and checks if the match ratio is above a certain threshold.</li> <li><code>trans_and_calculate_fuzzyness(file_path, cols_to_transliterate, match_col)</code>: Main function that applies transliteration and fuzzy matching to specified columns of a dataframe loaded from an Excel file. It creates new columns for transliterated text and the match percentages.</li> </ul> <pre><code>import pandas as pd\n\nfrom langdetect import detect\nfrom googletrans import Translator\nfrom polyglot.downloader import downloader\nfrom polyglot.transliteration import Transliterator\nfrom polyglot.detect import Detector\nfrom polyglot.text import Text\nfrom fuzzywuzzy import fuzz\n\ndownloader.download(\"transliteration2.ar\")\n\nMIN_TEXT_LENGTH = 2\nTHRESHOLD = 50  # Set the threshold for fuzzy matching\n\ndef detect_language(text):\nif len(str(text)) &lt; MIN_TEXT_LENGTH:\n      return None\ntry:\n      return detect(text)\nexcept LangDetectException:\n      return None\n\nmapped_words = {\n'\u0627\u0644\u0648\u062d\u062f\u0629 \u0627\u0644\u0635\u062d\u064a\u0629': 'HU',\n'\u0627\u0644\u0645\u0631\u0643\u0632 \u0627\u0644\u0635\u062d\u064a': 'HC',\n'\u0627\u0644\u0645\u062c\u0645\u0639 \u0627\u0644\u0635\u062d\u064a': 'Complex',\n'\u0627\u0644\u0635\u062d\u064a\u0629': 'HU',\n'\u0648\u062d\u062f\u0629': 'HU',\n'\u0635\u062d\u064a': 'HC',\n'\u0645\u0633\u062a\u0634\u0641\u0649': 'H',\n'\u0645\u0633\u062a\u0648\u0635\u0641': 'Dispensary',\n'\u0639\u064a\u0627\u062f\u0629': 'Clinic',\n'\u0637\u0648\u0627\u0631\u0649': 'emergancy',\n'\u0627\u0645\u0648\u0645\u0629': 'Maternity',\n'\u0637\u0641\u0648\u0644\u0629': 'Childhood',\n'\u0627\u0644\u0647\u0644\u0627\u0644': 'Crescent',\n'\u0627\u0644\u0635\u0644\u064a\u0628': 'Cross',\n'\u0627\u0644\u0623\u062d\u0645\u0631': 'Red',\n'\u0627\u0644\u0637\u0628\u064a': 'Medical',\n'\u0633\u062c\u0646 \u0645\u0631\u0643\u0632\u064a': 'Central Jail',\n'\u0633\u062c\u0646 \u0627\u0644\u0645\u0631\u0643\u0632\u064a': 'Central Jail',\n'\u0627\u0644\u0645\u0631\u0643\u0632\u064a': 'Central',\n'\u0645\u0631\u0643\u0632': 'HC',\n'\u0627\u0644\u0646\u0641\u0633\u064a\u0629': 'Psychological',\n'\u0627\u0644\u062c\u0627\u0645\u0639\u064a': 'educational',\n'\u0627\u0644\u062a\u0639\u0644\u064a\u0645\u064a': 'educational',\n'\u0645\u062e\u062a\u0628\u0631': 'Laboratory',\n'\u0627\u0644\u0648\u0637\u0646\u064a': 'National',\n'\u0627\u0644\u0639\u0627\u0645\u0629': 'Public',\n'\u0627\u0644\u062e\u0627\u0635': 'Private',\n}\n\ndef transliterate_text(text, language, primary_language='en'):\nif not isinstance(text, str) or len(text) &lt; MIN_TEXT_LENGTH:\n      return \"\"\nif language != primary_language:\n      detector = Detector(text, quiet=True)\n      if detector.language.code == 'ar':\n      new_text = Text(text)\n      transliterated_words = []\n      list_text = new_text.transliterate(\"en\")\n      for index, value in enumerate(list_text):\n            original = new_text.words[index]\n\n            for no_transliterate_word_key, no_transliterate_word_value in mapped_words.items():\n                  if no_transliterate_word_key in original:\n                  break\n            else:\n                  transliterated_words.append(value)\n\n      transliterated_words.reverse()\n      unique_list = []\n      [unique_list.append(x) for x in transliterated_words if x not in unique_list]\n\n      result = ' '.join(unique_list)\n      return result\nreturn text\n\ndef fuzzy_match(row, col1, col2, threshold):\nmatch_ratio = 0\nif isinstance(row[col2], str):\n      match_ratio = fuzz.token_set_ratio(row[col1], row[col2].lower())\n\nif match_ratio &gt;= threshold:\n      return f\"{match_ratio}%\"\nelse:\n      return \"\"\n\ndef trans_and_calculate_fuzzyness(file_path, cols_to_transliterate, match_col):\ndf = pd.read_excel(file_path)\nfor col in cols_to_transliterate:\n      new_col_name = f\"transliterated_{col}\"\n      df[new_col_name] = df[col].apply(lambda x: transliterate_text(x, detect_language(x)) if pd.notnull(x) else x)\nfor col in cols_to_transliterate:\n      transliterated_col = f\"transliterated_{col}\"\n      match_result_col = f\"match_percentage_{transliterated_col}\"\n      df[match_result_col] = df.apply(lambda x: fuzzy_match(x, match_col, transliterated_col, THRESHOLD), axis=1)\ndf.to_excel(\"transliterated_output.xlsx\", index=False)\n\nfile_path = 'unified_translitrated.xlsx'\ntrans_and_calculate_fuzzyness(file_path, ['hf_name_north_using_s_id_3','hf_name_north_using_7chars_4','hf_name_digit_5'], 'hf_name_ar_south_trans')\n</code></pre> </li> <li> <p>Normalize and standarize code, multiple purpose:</p> </li> </ul> <pre><code> # * **Health Facility Cleaning:**\n #   Normalizing health facility names is an essential step in data cleaning to ensure consistency and improve the accuracy of matching during the fuzzy matching process. Here's how I approached normalizing health facility columns:\n\n# * **Mount Google Drive:**\n\n# from google.colab import drive\n# drive.mount('/content/drive')\n\n## Enable Tables\n\n\n# %load_ext google.colab.data_table\n\n## Install necessary libraries\n\n# Install necessary libraries\n\n# !pip install fuzzywuzzy\n# !pip install geopy\n\n# !pip install transliterate\n\n# !pip install pyspellchecker\n# !pip install nltk\n# !pip install polyglot\n# !pip install langdetect\n\n## Imports\nimport pandas as pd\nfrom fuzzywuzzy import fuzz\nfrom geopy.distance import geodesic\n\n# from transliterate import translit\n\nfrom spellchecker import SpellChecker\nfrom nltk.stem import PorterStemmer\nfrom nltk.corpus import stopwords\nfrom polyglot.downloader import downloader\nfrom polyglot.transliteration import Transliterator\nfrom polyglot.detect import Detector\nfrom polyglot.text import Text\nfrom langdetect import detect\n\n# Download NLTK resources\n\nimport nltk\nnltk.download('stopwords')\n\n## Load HFs from The Excel file\n\ndf1 = pd.read_excel('/content/drive/MyDrive/NMCP_CM _DB/health_facilities_all_edited.xlsx', sheet_name='amd')\ndf2 = pd.read_excel('/content/drive/MyDrive/NMCP_CM_DB/health_facilities_all_edited.xlsx', sheet_name='standard')\ndf3 = pd.read_excel('/content/drive/MyDrive/NMCP_CM _DB/health_facilities_all_edited.xlsx', sheet_name='eidwes')\n\ndf = pd.concat([df1, df2, df3], ignore_index=True)\ndf\n\n## No transliterate Words\n\nno_transliterate_hf_names = {\n    '\u0627\u0644\u0648\u062d\u062f\u0629 \u0627\u0644\u0635\u062d\u064a\u0629': '\u0648\u062d\u062f\u0629 \u0635\u062d\u064a\u0629',\n    '\u0627\u0644\u0645\u0631\u0643\u0632 \u0627\u0644\u0635\u062d\u064a': '\u0645\u0631\u0643\u0632 \u0635\u062d\u064a',\n    '\u0627\u0644\u0645\u062c\u0645\u0639 \u0627\u0644\u0635\u062d\u064a': '\u0645\u062c\u0645\u0639 \u0635\u062d\u064a',\n    '\u0645\u0633\u062a\u0634\u0641\u0649': '\u0645\u0633\u062a\u0634\u0641\u0649',\n    '\u0645\u0633\u062a\u0648\u0635\u0641': '\u0645\u0633\u062a\u0648\u0635\u0641',\n    '\u0639\u064a\u0627\u062f\u0629': '\u0639\u064a\u0627\u062f\u0629',\n    '\u0637\u0648\u0627\u0631\u0649': '\u0637\u0648\u0627\u0631\u0626',\n    '\u0627\u0645\u0648\u0645\u0629': '\u0627\u0644\u0623\u0645\u0648\u0645\u0629',\n    '\u0637\u0641\u0648\u0644\u0629': '\u0627\u0644\u0637\u0641\u0648\u0644\u0629',\n    '\u0627\u0644\u0647\u0644\u0627\u0644': '\u0627\u0644\u0647\u0644\u0627\u0644',\n    '\u0627\u0644\u0635\u0644\u064a\u0628': '\u0627\u0644\u0635\u0644\u064a\u0628',\n    '\u0627\u0644\u0623\u062d\u0645\u0631': '\u0623\u062d\u0645\u0631',\n    '\u0627\u0644\u0637\u0628\u064a': '\u0627\u0644\u0637\u0628\u064a',\n    '\u0633\u062c\u0646 \u0645\u0631\u0643\u0632\u064a': '\u0633\u062c\u0646 \u0645\u0631\u0643\u0632\u064a',\n    '\u0633\u062c\u0646 \u0627\u0644\u0645\u0631\u0643\u0632\u064a': '\u0633\u062c\u0646 \u0645\u0631\u0643\u0632\u064a',\n    '\u0627\u0644\u0645\u0631\u0643\u0632\u064a': '\u0627\u0644\u0645\u0631\u0643\u0632\u064a',\n    '\u0645\u0631\u0643\u0632': '\u0645\u0631\u0643\u0632 \u0635\u062d\u064a',\n    '\u0627\u0644\u0635\u062d\u064a\u0629': '\u0648\u062d\u062f\u0629 \u0635\u062d\u064a\u0629',\n    '\u0648\u062d\u062f\u0629': '\u0648\u062d\u062f\u0629 \u0635\u062d\u064a\u0629',\n    '\u0635\u062d\u064a': '\u0645\u0631\u0643\u0632 \u0635\u062d\u064a',\n    '\u0627\u0644\u0646\u0641\u0633\u064a\u0629': '\u0627\u0644\u0646\u0641\u0633\u064a\u0629',\n    '\u0627\u0644\u062c\u0627\u0645\u0639\u064a': '\u0627\u0644\u062a\u0639\u0644\u064a\u0645\u064a',\n    '\u0627\u0644\u062a\u0639\u0644\u064a\u0645\u064a': '\u0627\u0644\u062a\u0639\u0644\u064a\u0645\u064a',\n    '\u0645\u062e\u062a\u0628\u0631': '\u0645\u062e\u062a\u0628\u0631',\n    '\u0627\u0644\u0648\u0637\u0646\u064a': '\u0627\u0644\u0648\u0637\u0646\u064a',\n    '\u0627\u0644\u0639\u0627\u0645\u0629': '\u0627\u0644\u0639\u0627\u0645',\n    '\u0627\u0644\u062e\u0627\u0635': '\u0627\u0644\u062e\u0627\u0635',\n}\n\n## Transiltrate Arabic HFs sheets (AMD, And Herams)\n\ndef transliterate_arabic_to_english(arabic_name):\n    try:\n        # Transliterate Arabic name to English using ISO 233-2 standard\n        english_name = translit(arabic_name, 'ar', reversed=True)\n        return english_name\n    except Exception as e:\n        print(f\"Error transliterating {arabic_name}: {e}\")\n        return arabic_name\n\ndf['facility_name_transliterated'] = df['facility_name'].apply(transliterate_arabic_to_english)\n\n# # Spell checking\n\n# spell = SpellChecker()\n\n# df['facility_name_transliterated'] = df['facility_name_transliterated'].apply(lambda x: ' '.join([spell.correction(word) for word in x.split()]))\n\n df\n\n## Normalize health facility names\n\n### Common Normalizing steps\n\n# * Handle empty values.\n\n# * Handle numeric values or containing numbers.\n# * Convert all health facility names to lowercase for consistency.\n# * Remove punctuation and special characters to ensure clean text.\n# * Strip leading and trailing whitespaces to prevent inconsistencies.\n# * Replace multiple spaces with a single space for uniformity.\n\ndf['facility_name_norm'] = df['facility_name']\ndf['facility_name_norm'] = df['facility_name_norm'].fillna('')\ndf['facility_name_norm'] = df['facility_name_norm'].astype(str)\n\ndf['facility_name_norm'] = df['facility_name_norm'].str.lower()\ndf['facility_name_norm'] = df['facility_name_norm'].str.replace('[^\\w\\s]', '')\ndf['facility_name_norm'] = df['facility_name_norm'].str.strip()\ndf['facility_name_norm'] = df['facility_name_norm'].str.replace('\\s+', ' ')\n\n### Other Normalizing steps\n\n# * Expand common abbreviations to their full form for better matching.\n# * removing common stop words that do not contribute significantly to the identification of a facility.\n# * Create a mapping for synonyms or variations in facility names to standardize them.\n# * Applies stemming to reduce words to their base or root form and removes common English stop words.\n# * Optionally, perform spell checking to correct common typos or misspellings.\n\n# Replace\n\ndf['facility_name'] = df['facility_name'].replace({' H ': ' Hospital '}, regex=True)\n\nstop_words = set(stopwords.words('english'))\ndf['facility_name'] = df['facility_name'].apply(lambda x: ' '.join([word for word in x.split() if word.lower() not in stop_words]))\n\n# Replace synonyms with a common names\n\nsynonym_mapping = {'HU': 'Health Unit'}\ndf['facility_name'] = df['facility_name'].replace(synonym_mapping, regex=True)\n\n# NLTK for stemming\n\nstemmer = PorterStemmer()\ndf['facility_name'] = df['facility_name'].apply(lambda x: ' '.join([stemmer.stem(word) for word in x.split()]))\n\n# Spellchecker\n\nspell = SpellChecker()\ndf['facility_name'] = df['facility_name'].apply(lambda x: ' '.join([spell.correction(word) for word in x.split()]))\n\n## Normalize GPS coordinates\n\n# This step ensures that coordinates are represented consistently and reduces noise.\n\n# * Round latitude and longitude to 6 decimal places for consistency.\n# * Check for missing or invalid coordinates and removing records with missing coordinates.\n# * Outlier Detection\n\n# Format latitude and longitude to a consistent number of decimal places\n\ndf['latitude'] = df['latitude'].round(6)\ndf['longitude'] = df['longitude'].round(6)\n\n# Drop rows with missing coordinates\n\ndf = df.dropna(subset=['latitude', 'longitude'])\n\n# Remove outliers based on a predefined threshold\n\nlatitude_threshold = (df['latitude'].quantile(0.01), df['latitude'].quantile(0.99))\nlongitude_threshold = (df['longitude'].quantile(0.01), df['longitude'].quantile(0.99))\n\ndf = df[(df['latitude'] &gt;= latitude_threshold[0]) &amp; (df['latitude'] &lt;= latitude_threshold[1])]\ndf = df[(df['longitude'] &gt;= longitude_threshold[0]) &amp; (df['longitude'] &lt;= longitude_threshold[1])]\n</code></pre>"},{"location":"final-report/","title":"Final report","text":"<ul> <li>Report final<ul> <li>Executive Summary</li> <li>Introduction</li> <li>2. Methodology<ul> <li>2.1 Data Sources</li> <li>2.2 Processing Workflow</li> <li>2.3 Tools and Technologies</li> <li>Additional Data</li> </ul> </li> </ul> </li> </ul>"},{"location":"final-report/#report-final","title":"Report final","text":"<p>Project: Data assembly and cleaning Of NMCP Yemen and automating the workflow for the risk map of Malaria in Yemen for planning future campaigns resources and funding:</p>"},{"location":"final-report/#executive-summary","title":"Executive Summary","text":"<p>Challenge: The National Malaria Control Program (NMCP) in Yemen faces significant challenges in analyzing and utilizing its vast data on malaria control activities due to inconsistencies in data formats, codes, and collection methods. This lack of data accessibility and quality hinders effective program evaluation, intervention targeting, and resource allocation.</p> <p>Approach: The project used a Collaborative Approach Engaging a cross-functional team to collaboratively address inconsistencies in data formats, Actively involving Risk analysis team in harmonization decisions, ensuring alignment with program goals, and Iteratively refining entity relationships based on feedback from them and NMCP management. The collaborative approach has resulted in a coherent dataset that reflects the collective expertise of the team.</p> <p>Result: This project successfully mapped all NMCP activity data into a structured format, significantly improving data accessibility and quality. Data completeness and accuracy metrics saw substantial improvements, and the established data model allows for comprehensive analysis across different entities and activities. Data visualization dashboards now provide real-time insights into key malaria control indicators, enabling informed decision-making for program optimization and resource allocation. Any Future data can be easily checked, validated, cleaned, and merged using the automated solution and the pipeline developed in this project.</p> <p>Impact: This project empowers the NMCP with a robust data foundation for effective malaria control efforts. Improved data accessibility and quality will lead to:</p> <ul> <li>Enhanced program monitoring and evaluation: Real-time data insights will enable the NMCP to track progress towards malaria elimination goals and identify areas requiring improvement.</li> <li>Targeted interventions: Data-driven analysis will inform the development of more effective and targeted interventions, maximizing resource utilization and impact.</li> <li>Improved resource allocation: Data analysis will guide the allocation of resources to areas with the highest burden of malaria, ensuring efficient and equitable program implementation.</li> <li>Knowledge sharing and collaboration: The structured data model facilitates data sharing and collaboration with other stakeholders, promoting knowledge exchange and coordinated efforts in malaria control.</li> </ul> <p>Recommendations: Building upon this success, the NMCP should:</p> <ul> <li>Continue data quality improvement: Implement ongoing data quality monitoring and maintenance procedures to ensure data integrity and reliability.</li> <li>Integrate with other data sources: Combine malaria control data with other relevant data sources (e.g., weather, population) for comprehensive analysis and prediction.</li> <li>Promote data utilization: Train NMCP personnel and stakeholders on data analysis tools and techniques to maximize the utilization of data for informed decision-making.</li> </ul> <p>By leveraging the foundation established by this project, the NMCP can accelerate its progress towards a malaria-free future in Yemen.</p>"},{"location":"final-report/#introduction","title":"Introduction","text":"<p>Malaria remains a significant public health threat in Yemen, with 150K cases reported annually. Effective control requires a comprehensive understanding of the disease dynamics, intervention effectiveness, and resource allocation strategies. However, the National Malaria Control Program (NMCP) faces significant challenges in utilizing its vast data on malaria control activities due to:</p> <ul> <li>Data inconsistencies: Data from various sources often use different formats, codes, and collection methods, making it difficult to integrate and analyze effectively.</li> <li>Data quality issues: Incompleteness, inaccuracies, and missing data further hinder the reliability and usability of the information.</li> <li>Limited data accessibility: Data is often stored in disparate silos, making it difficult for program managers and stakeholders to access and utilize it for informed decision-making.</li> </ul> <p>Recognizing these challenges, the NMCP embarked on a critical initiative to map all its activity data into a unified, structured format. This project aimed to:</p> <ul> <li>Create master lists: Review and Update the standardized lists available of key entities involved in malaria control, such as villages, health facilities, and community health volunteers. and develop the missing ones needed for the mapping process.</li> <li>Connect/Define Catchment of each health facilities: connect health facilities with their corresponding catchment villages. Building on an Existing mapping and utilizing a data-driven approach and robust methodologies, to establish a detailed catchment map that empowers informed resource allocation and optimizes service delivery within the region.</li> <li>Automated Data Pipelines (Pentaho and Python-Powered): Implement lately to streamlined data processing and maintained data integrity throughout the analysis by employing Pentaho to orchestrate data extraction, and transformation processes. create scripts to address some data inconsistencies, including standardization, and normalization.</li> <li>Clean and merge data: Review, clean, and merge data routine/not routine data from various sources, ensuring consistency and compatibility with the master lists.</li> <li>Develop data visualization tools: Create interactive dashboards and reports to visualize trends, analyze intervention effectiveness, and track progress towards malaria control goals.</li> <li>Implement testing: to guarantee data integrity and consistency before merging into the production Database.</li> </ul> <p>This report details the methodology, results, and impact of this data mapping project. It highlights the significant improvements in data accessibility, quality, and utilization, paving the way for enhanced malaria control efforts in Yemen.</p>"},{"location":"final-report/#2-methodology","title":"2. Methodology","text":""},{"location":"final-report/#21-data-sources","title":"2.1 Data Sources","text":"<p>The project integrated data from the following primary sources:</p> <ul> <li>ITN Distribution Data:<ul> <li>Format: Excel spreadsheets with village codes, household counts, net quantities, team, date, etc.</li> <li>Inconsistencies:<ul> <li>Village code formats: Mixing numeric and alphanumeric formats, missing or incomplete codes.</li> <li>Data entry errors.</li> <li>Missing values, inconsistencies with reported village population.</li> <li>Mismatches in date of submission_time.</li> </ul> </li> </ul> </li> <li>IRS Data:<ul> <li>Format: Excel spreadsheets with sprayed structures, dates, insecticides, ...</li> <li>Inconsistencies:<ul> <li>Village code formats: Mixing numeric and alphanumeric formats, missing or incomplete codes.</li> <li>Personnel names: Variations in spelling, abbreviations, missing names.</li> <li>Mismatches in date of submission_time</li> </ul> </li> </ul> </li> <li>LSM Data:<ul> <li>Format: Paper-based and Electronic forms with breeding site identification, treatment methods, dates.</li> <li>Inconsistencies:<ul> <li>Transcription errors due to manual data entry.</li> <li>Incompatible data types for similar variables (e.g., income as categorical vs. continuous)</li> <li>Incomplete data: Missing information on breeding site type, treatment dosage, etc.</li> </ul> </li> </ul> </li> <li>CHV Data:<ul> <li>Format: Excel spreadsheets with CHV demographics, village assignments, malaria case reports.</li> <li>Inconsistencies:<ul> <li>Duplicate CHV records due to name variations or reassignments.</li> <li>Village: Not coded and uses names having variations in spelling, missing or incomplete names.</li> <li>Missing info about time of assignment or withdrawal.</li> </ul> </li> </ul> </li> <li>Malaria Cases Data:<ul> <li>Format: NMCP database with Monthly case reports, EIdews database with Weekly case reports.</li> <li>Inconsistencies:<ul> <li>Inconsistencies in coding systems, data entry errors, and missing values were common.</li> <li>Facility codes: Inaccurate or outdated facility codes impacting data aggregation.</li> <li>Different temporal collection: 2011-2016 Monthly, and 2017 onward is weekly.</li> <li>adding/removing dataelements and updating structure from year to another.</li> <li>changed sources of data: NMCP and then EIdews, resulting in discrepancies in health facility coding, often with varying levels of granularity</li> </ul> </li> </ul> </li> <li>Administrative Data:<ul> <li>Format: Country GIS Geodata database, Standard Health Facilities information, Excel spreadsheets Community Health Volunteers list.</li> <li>Inconsistencies:<ul> <li>Outdated Country GIS Geodata database.</li> <li>Facility codes: Inaccurate or outdated facility codes impacting data aggregation.</li> <li>Duplicate of records in the GIS Geodata database.</li> <li>Other different inconsistencies.</li> <li>Duplicate Health Facilities records and inconsistencies in names required automated and manual careful resolution.</li> </ul> </li> </ul> </li> </ul>"},{"location":"final-report/#22-processing-workflow","title":"2.2 Processing Workflow","text":"<p>2.2.1 Data Cleaning and Transformation:</p> <ul> <li>Standardization:<ul> <li>Village codes: Harmonized across datasets using a master list, ensuring one-to-one mapping and eliminating ambiguities.</li> <li>Date formats: Converted to a consistent format (e.g., ISO 8601) for improved sorting and analysis.</li> <li>Personnel names: Standardized using string normalization techniques and cross-referencing with personnel records.</li> <li>Implement soundex and other phonetic matching techniques to identify potential duplicates and variations, followed by manual verification and standardization.</li> <li>Temporal Alignment: Align Malaria Cases data with varying temporal granularities using interpolation and/or aggregation techniques.</li> </ul> </li> <li> <p>Error Correction:</p> <ul> <li>Applied techniques such as rule-based error correction, outlier detection, and imputation to address inconsistencies and missing values..</li> <li>Fuzzy matching to link village/HF names with similar spellings in the master list.</li> <li>Leverage Python library dateutil to parse various formats and convert to a consistent ISO 8601 standard.</li> <li>Utilize imputation techniques like mean/median imputation or K-Nearest Neighbors to fill in missing values based on context and relationships within the data.</li> <li>Manual review and correction of identified errors, ensuring data integrity through:<ul> <li>left it unchanged: The most conservative course of action was to accept the data as a valid response and made no change to it. The larger the sample size, the less one suspect response would affect the analysis; the smaller the sample size, the more difficult the decision was.</li> <li>Corrected the data: If the respondent\u2019s original intent could be determined, we corrected the answer.</li> <li>Soft-deleted the data: If The data seemed illogical and the value was so far from the norm that it would affect descriptive or inferential statistics. We resorted to Soft-Deleting just this response or the entire record. To understand the impact of deleting a data point, a binary variable was created (1=suspicious record, 0=not suspicious). This new variable was used as a record filter in Pivot tables or in-table filtering to understand the impact of potentially erroneous data in the final results.</li> <li>If it was possible, we re-measured the suspected or erroneous values. through returning back to the paper registers, contacting the collector...etc.</li> <li>we kept logs for what changed while maintaining the original data for future checks.</li> </ul> </li> </ul> </li> <li> <p>Outlier Handling:</p> <ul> <li>Investigation of potential outliers (e.g., unusually high net distributions) through data visualization and cross-referencing with other sources.</li> </ul> </li> </ul> <p>2.2.2 Master List Creation and Maintenance:</p> <ul> <li>Village list: Consolidated and standardized village names and codes from multiple sources, addressing duplicates and inconsistencies.</li> <li>Health facility list (HF):<ul> <li>A comprehensive list of health facilities was created with unique codes, names, and geographic coordinates, merging HFs from EIdews Malaria cases reporting system and NMCP records to provide a clear picture of health infrastructure, merged different sources into one.</li> <li>Checked and updated the list through collaboration with local authorities and community to reflect changes in facility closures, expansions, or changes in operational status.</li> <li>Collaborative Master List Management: The master list maintenance involves a collaborative approach:<ul> <li> <ul> <li>Community engagement: Working with local village representatives and health facilities to verify village boundaries and facility locations.</li> </ul> </li> <li>Online platform: Developing a web-based portal for everyone to report discrepancies and suggest updates to the master list.</li> <li>Version control system: Implementing a version control system to track changes and revert to previous versions if necessary.</li> </ul> </li> </ul> </li> </ul> <p></p> <p></p> <ul> <li>CHV list:<ul> <li>Compiled a comprehensive list of CHVs with unique identifiers, demographic information, village assignments, and contact details, resolving duplicate records.</li> <li>Implement de-duplication algorithms to identify and merge duplicate CHV records based on unique identifiers, demographics, and village assignments.</li> <li>Cross-reference CHVs with village master list to ensure accurate village assignments and avoid inconsistencies.</li> </ul> </li> </ul>"},{"location":"final-report/#223-data-merging-and-integration","title":"2.2.3 Data Merging and Integration","text":"<ul> <li>Mapping to master lists: Linked activity data to corresponding master lists using village codes, health facility codes, and CHV identifiers.</li> <li>Resolving Record Linkage Issues: Employed probabilistic matching techniques to account for variations in names and addresses, with manual verification for high-confidence matches.</li> <li>Resolving inconsistencies: Addressed discrepancies in codes or names through manual verification and cross-referencing with original data sources.</li> <li>Data validation checks: Implemented automated checks to ensure consistency between data sources, such as comparing ITN quantities with household counts and verifying CHV village assignments, proactively identifying and addressing potential errors.</li> <li>Automate Future Data Merging: Implemented automated submission of data from Kobo forms, so data can be directly sent to at will to their respective tables in this structure for analysis.</li> </ul>"},{"location":"final-report/#224-data-quality-assessment","title":"2.2.4 Data Quality Assessment","text":"<ul> <li>Data lineage tracking: Tracing the origin and transformations of each data point to ensure transparency and audibility.</li> <li>Validation checks: Implemented domain-specific validation rules (e.g., checking if reported net quantities fall within plausible ranges for village sizes). Verified data integrity through cross-referencing with external sources (e.g., population data).</li> <li>Completeness Analysis: Calculated the percentage of missing values for key variables and analyzed the distribution of missingness across different datasets. Identified patterns and potential reasons for missing data (e.g., reporting delays, data entry challenges). Documented for improved future training programs to improve data collection and reporting practices.</li> </ul>"},{"location":"final-report/#225-complementing-implementations","title":"2.2.5 Complementing Implementations","text":"<ul> <li>Additional Metadata Tables: Additional metadata tables to capture supplementary information were created. For example, tables for recording specific campaign parameters, team details, or warehouse attributes.</li> <li>Logs and Audit Trails: Lately We implemented logging and audit trail mechanisms to track changes to critical data. This would ensures accountability and helps in troubleshooting if issues arise.</li> <li>Reporting and integration Tables: When campaigns involved integration with external systems or data sources such as Kobo or ODK,  additional tables, and views where added to handle any integration seamlessly. To generate reports and analytics, additional tables and views were created too and optimized for reporting purposes. Which could help improve the performance of complex queries.</li> </ul>"},{"location":"final-report/#23-tools-and-technologies","title":"2.3 Tools and Technologies","text":"<ul> <li>Data cleaning and integration: Python (pandas, NumPy, and other libraries), Pentaho Data Integration and MetaData Management, OpenRefine, facilitated automated data manipulation and cleaning tasks. SQL, Excel.</li> <li>Data storage: PostgreSQL database with version control and audit trails.</li> <li>Data visualization: Power BI enabled the creation of interactive dashboards and reports for data visualization and analysis.</li> </ul>"},{"location":"final-report/#additional-data","title":"Additional Data","text":""},{"location":"final-report/#diagrams","title":"Diagrams","text":"<p>Bellow are Visuals that depict the data processing workflow, master list structures, Pentaho integration Work flow and relationships between datasets.</p> <ul> <li>Final Structure of main Tables:</li> </ul> <pre><code>erDiagram\n  DISTRICT ||--o{ HEALTH-FACILITY : \"Administrative level of one or more\"\n  DISTRICT ||--o{ VILLAGES-LOCATION : \"Administrative level of one or more\"\n  HEALTH-FACILITY ||--o{ VILLAGES-LOCATION : \"Administrative level of one or more\"\n  HEALTH-FACILITY ||--o{ CHV : \"Supervises one or more\"\n  HEALTH-FACILITY ||--o{ MALARIA-CASES-REPORT : \"submits one or more\"\n  CHV ||--|{ CHV-MALARIA-CASES-REPORT : \"submits one or more\"\n  VILLAGES-LOCATION ||--o{ ITN-REPORT : \"Has one or more\"\n  VILLAGES-LOCATION ||--o{ IRS-REPORT : \"Has one or more\"</code></pre> <ul> <li> <p>Fetch data from KoboToolBox into a Temporary Table pipeline: </p> </li> <li> <p>Health Facilities merge and remove duplicates: </p> </li> <li> <p>Anti-Malaria Drugs merge workflow: Multiple steps merged into one picture</p> </li> </ul> <p></p> <p>Work flow 2:</p> <p></p> <ul> <li>Master list re-import into database workflow: After manual review</li> </ul> <p></p> <ul> <li>Catchment Merge workflow:</li> </ul> <p></p> <ul> <li> <p>Picture showing some manual verifications of catchments:</p> <ul> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ul> </li> </ul>"},{"location":"final-report/#tables","title":"Tables","text":"<p>Bellow are Summaries for data quality metrics, such as completeness rates and error rates, for each dataset and stage of the process.</p> <p>Final Status oF Data: as of June, 24 2023</p> <p>The following table shows NORTH/SOUTH Health Facilities that have some data in the north files and needs either be mapped to catchments localities or locate their GPS coordinate:</p> <p> Final Health Facilities Mapping &amp; GPS status</p> hf_owner - WITH NO CATCHMENTS WITH NO CATCHMENT &amp; GPS WITH NO GPS OTHER 292 PRIVATE 574 111 PUBLIC 4692 848 291 1 <p>There are currently 118234 120982 locations in total, of which 105855: 89% 110898: 91% have been mapped to a health facility in the <code>md_health_facilities.csv</code> master file.</p> <p> Final CMs Mapping status</p> S/N gov_id gov % MAPPED UNMAPPED NORTH 11 Ibb 16497 NORTH 17 Hajjah 14416 NORTH 20 Dhamar 14219 NORTH/SOUTH 18 Al Hudaydah 9508 NORTH 23 Sana'a 7504 1 NORTH 22 Sa'ada 6992 NORTH 31 Raymah 6766 NORTH 29 Amran 6421 NORTH 16 Al Jawf 2650 NORTH 27 Al Mahwit 4788 29 NORTH/SOUTH 26 Marib 2181 213 NORTH 13 Amanat Al Asimah 5736 773 NORTH/SOUTH 15 Taizz 9574 9068 NORTH/SOUTH 14 Al Bayda 3646 <p>Join status between reports and catchments:</p> <ul> <li>ITNs Reports: <code>rd_itns_data.csv</code> \u2192 <code>md_catchment_locations.csv</code></li> </ul> <p> Final ITN's Records Mapping status </p> Total linked unlinked (IDPs Camps) unlinked Other 50735 records 49806 155 774 <ul> <li>IRS Reports: <code>rd_irs_data.csv</code> \u2192 <code>md_catchment_locations.csv</code></li> </ul> <p>  Final IRS Records Mapping status </p> <p> After IRS 2022 data was Included </p> Total linked unlinked (IDPs Camps) unlinked Other 41108 records 39791 154 1163"},{"location":"final-report/#code-snippets","title":"Code Snippets","text":"<p>Bellow are Examples of key data cleaning and transformation techniques</p> <ul> <li> <p>Code of checking for duplicates in Health Facility lists</p> </li> <li> <p>Libraries Import:</p> <ul> <li><code>pandas</code>: For data manipulation and analysis.</li> <li><code>langdetect</code>: To detect the language of a given text.</li> <li><code>googletrans</code>: An unofficial library that uses Google Translate.</li> <li><code>polyglot</code>: Multilingual text processing library, used here for transliteration.</li> <li><code>fuzzywuzzy</code>: For fuzzy string matching.</li> </ul> </li> <li> <p>Language Processing Tools Initialization:</p> <ul> <li>The script downloads language resources for transliteration (<code>transliteration2.ar</code>) from <code>polyglot</code>.</li> </ul> </li> <li> <p>Constants and Mappings:</p> <ul> <li><code>MIN_TEXT_LENGTH</code>: A minimum length for text to be considered for language detection and transliteration.</li> <li><code>THRESHOLD</code>: The threshold for fuzzy matching.</li> <li><code>mapped_words</code>: A dictionary mapping Arabic health facility names to their English abbreviations or translations.</li> </ul> </li> <li> <p>Function Definitions:</p> <ul> <li><code>detect_language(text)</code>: Detects the language of the given text. If the text is too short or language detection fails, it returns <code>None</code>.</li> <li><code>transliterate_text(text, language, primary_language='en')</code>: Transliterates the text to English if it's not in the primary language and handles specific word mappings for healthcare-related terms.</li> <li><code>fuzzy_match(row, col1, col2, threshold)</code>: Performs fuzzy matching between two columns in a dataframe row and checks if the match ratio is above a certain threshold.</li> <li><code>trans_and_calculate_fuzzyness(file_path, cols_to_transliterate, match_col)</code>: Main function that applies transliteration and fuzzy matching to specified columns of a dataframe loaded from an Excel file. It creates new columns for transliterated text and the match percentages.</li> </ul> <pre><code>import pandas as pd\n\nfrom langdetect import detect\nfrom googletrans import Translator\nfrom polyglot.downloader import downloader\nfrom polyglot.transliteration import Transliterator\nfrom polyglot.detect import Detector\nfrom polyglot.text import Text\nfrom fuzzywuzzy import fuzz\n\ndownloader.download(\"transliteration2.ar\")\n\nMIN_TEXT_LENGTH = 2\nTHRESHOLD = 50  # Set the threshold for fuzzy matching\n\ndef detect_language(text):\nif len(str(text)) &lt; MIN_TEXT_LENGTH:\n      return None\ntry:\n      return detect(text)\nexcept LangDetectException:\n      return None\n\nmapped_words = {\n'\u0627\u0644\u0648\u062d\u062f\u0629 \u0627\u0644\u0635\u062d\u064a\u0629': 'HU',\n'\u0627\u0644\u0645\u0631\u0643\u0632 \u0627\u0644\u0635\u062d\u064a': 'HC',\n'\u0627\u0644\u0645\u062c\u0645\u0639 \u0627\u0644\u0635\u062d\u064a': 'Complex',\n'\u0627\u0644\u0635\u062d\u064a\u0629': 'HU',\n'\u0648\u062d\u062f\u0629': 'HU',\n'\u0635\u062d\u064a': 'HC',\n'\u0645\u0633\u062a\u0634\u0641\u0649': 'H',\n'\u0645\u0633\u062a\u0648\u0635\u0641': 'Dispensary',\n'\u0639\u064a\u0627\u062f\u0629': 'Clinic',\n'\u0637\u0648\u0627\u0631\u0649': 'emergancy',\n'\u0627\u0645\u0648\u0645\u0629': 'Maternity',\n'\u0637\u0641\u0648\u0644\u0629': 'Childhood',\n'\u0627\u0644\u0647\u0644\u0627\u0644': 'Crescent',\n'\u0627\u0644\u0635\u0644\u064a\u0628': 'Cross',\n'\u0627\u0644\u0623\u062d\u0645\u0631': 'Red',\n'\u0627\u0644\u0637\u0628\u064a': 'Medical',\n'\u0633\u062c\u0646 \u0645\u0631\u0643\u0632\u064a': 'Central Jail',\n'\u0633\u062c\u0646 \u0627\u0644\u0645\u0631\u0643\u0632\u064a': 'Central Jail',\n'\u0627\u0644\u0645\u0631\u0643\u0632\u064a': 'Central',\n'\u0645\u0631\u0643\u0632': 'HC',\n'\u0627\u0644\u0646\u0641\u0633\u064a\u0629': 'Psychological',\n'\u0627\u0644\u062c\u0627\u0645\u0639\u064a': 'educational',\n'\u0627\u0644\u062a\u0639\u0644\u064a\u0645\u064a': 'educational',\n'\u0645\u062e\u062a\u0628\u0631': 'Laboratory',\n'\u0627\u0644\u0648\u0637\u0646\u064a': 'National',\n'\u0627\u0644\u0639\u0627\u0645\u0629': 'Public',\n'\u0627\u0644\u062e\u0627\u0635': 'Private',\n}\n\ndef transliterate_text(text, language, primary_language='en'):\nif not isinstance(text, str) or len(text) &lt; MIN_TEXT_LENGTH:\n      return \"\"\nif language != primary_language:\n      detector = Detector(text, quiet=True)\n      if detector.language.code == 'ar':\n      new_text = Text(text)\n      transliterated_words = []\n      list_text = new_text.transliterate(\"en\")\n      for index, value in enumerate(list_text):\n            original = new_text.words[index]\n\n            for no_transliterate_word_key, no_transliterate_word_value in mapped_words.items():\n                  if no_transliterate_word_key in original:\n                  break\n            else:\n                  transliterated_words.append(value)\n\n      transliterated_words.reverse()\n      unique_list = []\n      [unique_list.append(x) for x in transliterated_words if x not in unique_list]\n\n      result = ' '.join(unique_list)\n      return result\nreturn text\n\ndef fuzzy_match(row, col1, col2, threshold):\nmatch_ratio = 0\nif isinstance(row[col2], str):\n      match_ratio = fuzz.token_set_ratio(row[col1], row[col2].lower())\n\nif match_ratio &gt;= threshold:\n      return f\"{match_ratio}%\"\nelse:\n      return \"\"\n\ndef trans_and_calculate_fuzzyness(file_path, cols_to_transliterate, match_col):\ndf = pd.read_excel(file_path)\nfor col in cols_to_transliterate:\n      new_col_name = f\"transliterated_{col}\"\n      df[new_col_name] = df[col].apply(lambda x: transliterate_text(x, detect_language(x)) if pd.notnull(x) else x)\nfor col in cols_to_transliterate:\n      transliterated_col = f\"transliterated_{col}\"\n      match_result_col = f\"match_percentage_{transliterated_col}\"\n      df[match_result_col] = df.apply(lambda x: fuzzy_match(x, match_col, transliterated_col, THRESHOLD), axis=1)\ndf.to_excel(\"transliterated_output.xlsx\", index=False)\n\nfile_path = 'unified_translitrated.xlsx'\ntrans_and_calculate_fuzzyness(file_path, ['hf_name_north_using_s_id_3','hf_name_north_using_7chars_4','hf_name_digit_5'], 'hf_name_ar_south_trans')\n</code></pre> </li> <li> <p>Normalize and standarize code, multiple purpose:</p> </li> </ul> <pre><code> # * **Health Facility Cleaning:**\n #   Normalizing health facility names is an essential step in data cleaning to ensure consistency and improve the accuracy of matching during the fuzzy matching process. Here's how I approached normalizing health facility columns:\n\n# * **Mount Google Drive:**\n\n# from google.colab import drive\n# drive.mount('/content/drive')\n\n## Enable Tables\n\n\n# %load_ext google.colab.data_table\n\n## Install necessary libraries\n\n# Install necessary libraries\n\n# !pip install fuzzywuzzy\n# !pip install geopy\n\n# !pip install transliterate\n\n# !pip install pyspellchecker\n# !pip install nltk\n# !pip install polyglot\n# !pip install langdetect\n\n## Imports\nimport pandas as pd\nfrom fuzzywuzzy import fuzz\nfrom geopy.distance import geodesic\n\n# from transliterate import translit\n\nfrom spellchecker import SpellChecker\nfrom nltk.stem import PorterStemmer\nfrom nltk.corpus import stopwords\nfrom polyglot.downloader import downloader\nfrom polyglot.transliteration import Transliterator\nfrom polyglot.detect import Detector\nfrom polyglot.text import Text\nfrom langdetect import detect\n\n# Download NLTK resources\n\nimport nltk\nnltk.download('stopwords')\n\n## Load HFs from The Excel file\n\ndf1 = pd.read_excel('/content/drive/MyDrive/NMCP_CM _DB/health_facilities_all_edited.xlsx', sheet_name='amd')\ndf2 = pd.read_excel('/content/drive/MyDrive/NMCP_CM_DB/health_facilities_all_edited.xlsx', sheet_name='standard')\ndf3 = pd.read_excel('/content/drive/MyDrive/NMCP_CM _DB/health_facilities_all_edited.xlsx', sheet_name='eidwes')\n\ndf = pd.concat([df1, df2, df3], ignore_index=True)\ndf\n\n## No transliterate Words\n\nno_transliterate_hf_names = {\n    '\u0627\u0644\u0648\u062d\u062f\u0629 \u0627\u0644\u0635\u062d\u064a\u0629': '\u0648\u062d\u062f\u0629 \u0635\u062d\u064a\u0629',\n    '\u0627\u0644\u0645\u0631\u0643\u0632 \u0627\u0644\u0635\u062d\u064a': '\u0645\u0631\u0643\u0632 \u0635\u062d\u064a',\n    '\u0627\u0644\u0645\u062c\u0645\u0639 \u0627\u0644\u0635\u062d\u064a': '\u0645\u062c\u0645\u0639 \u0635\u062d\u064a',\n    '\u0645\u0633\u062a\u0634\u0641\u0649': '\u0645\u0633\u062a\u0634\u0641\u0649',\n    '\u0645\u0633\u062a\u0648\u0635\u0641': '\u0645\u0633\u062a\u0648\u0635\u0641',\n    '\u0639\u064a\u0627\u062f\u0629': '\u0639\u064a\u0627\u062f\u0629',\n    '\u0637\u0648\u0627\u0631\u0649': '\u0637\u0648\u0627\u0631\u0626',\n    '\u0627\u0645\u0648\u0645\u0629': '\u0627\u0644\u0623\u0645\u0648\u0645\u0629',\n    '\u0637\u0641\u0648\u0644\u0629': '\u0627\u0644\u0637\u0641\u0648\u0644\u0629',\n    '\u0627\u0644\u0647\u0644\u0627\u0644': '\u0627\u0644\u0647\u0644\u0627\u0644',\n    '\u0627\u0644\u0635\u0644\u064a\u0628': '\u0627\u0644\u0635\u0644\u064a\u0628',\n    '\u0627\u0644\u0623\u062d\u0645\u0631': '\u0623\u062d\u0645\u0631',\n    '\u0627\u0644\u0637\u0628\u064a': '\u0627\u0644\u0637\u0628\u064a',\n    '\u0633\u062c\u0646 \u0645\u0631\u0643\u0632\u064a': '\u0633\u062c\u0646 \u0645\u0631\u0643\u0632\u064a',\n    '\u0633\u062c\u0646 \u0627\u0644\u0645\u0631\u0643\u0632\u064a': '\u0633\u062c\u0646 \u0645\u0631\u0643\u0632\u064a',\n    '\u0627\u0644\u0645\u0631\u0643\u0632\u064a': '\u0627\u0644\u0645\u0631\u0643\u0632\u064a',\n    '\u0645\u0631\u0643\u0632': '\u0645\u0631\u0643\u0632 \u0635\u062d\u064a',\n    '\u0627\u0644\u0635\u062d\u064a\u0629': '\u0648\u062d\u062f\u0629 \u0635\u062d\u064a\u0629',\n    '\u0648\u062d\u062f\u0629': '\u0648\u062d\u062f\u0629 \u0635\u062d\u064a\u0629',\n    '\u0635\u062d\u064a': '\u0645\u0631\u0643\u0632 \u0635\u062d\u064a',\n    '\u0627\u0644\u0646\u0641\u0633\u064a\u0629': '\u0627\u0644\u0646\u0641\u0633\u064a\u0629',\n    '\u0627\u0644\u062c\u0627\u0645\u0639\u064a': '\u0627\u0644\u062a\u0639\u0644\u064a\u0645\u064a',\n    '\u0627\u0644\u062a\u0639\u0644\u064a\u0645\u064a': '\u0627\u0644\u062a\u0639\u0644\u064a\u0645\u064a',\n    '\u0645\u062e\u062a\u0628\u0631': '\u0645\u062e\u062a\u0628\u0631',\n    '\u0627\u0644\u0648\u0637\u0646\u064a': '\u0627\u0644\u0648\u0637\u0646\u064a',\n    '\u0627\u0644\u0639\u0627\u0645\u0629': '\u0627\u0644\u0639\u0627\u0645',\n    '\u0627\u0644\u062e\u0627\u0635': '\u0627\u0644\u062e\u0627\u0635',\n}\n\n## Transiltrate Arabic HFs sheets (AMD, And Herams)\n\ndef transliterate_arabic_to_english(arabic_name):\n    try:\n        # Transliterate Arabic name to English using ISO 233-2 standard\n        english_name = translit(arabic_name, 'ar', reversed=True)\n        return english_name\n    except Exception as e:\n        print(f\"Error transliterating {arabic_name}: {e}\")\n        return arabic_name\n\ndf['facility_name_transliterated'] = df['facility_name'].apply(transliterate_arabic_to_english)\n\n# # Spell checking\n\n# spell = SpellChecker()\n\n# df['facility_name_transliterated'] = df['facility_name_transliterated'].apply(lambda x: ' '.join([spell.correction(word) for word in x.split()]))\n\n df\n\n## Normalize health facility names\n\n### Common Normalizing steps\n\n# * Handle empty values.\n\n# * Handle numeric values or containing numbers.\n# * Convert all health facility names to lowercase for consistency.\n# * Remove punctuation and special characters to ensure clean text.\n# * Strip leading and trailing whitespaces to prevent inconsistencies.\n# * Replace multiple spaces with a single space for uniformity.\n\ndf['facility_name_norm'] = df['facility_name']\ndf['facility_name_norm'] = df['facility_name_norm'].fillna('')\ndf['facility_name_norm'] = df['facility_name_norm'].astype(str)\n\ndf['facility_name_norm'] = df['facility_name_norm'].str.lower()\ndf['facility_name_norm'] = df['facility_name_norm'].str.replace('[^\\w\\s]', '')\ndf['facility_name_norm'] = df['facility_name_norm'].str.strip()\ndf['facility_name_norm'] = df['facility_name_norm'].str.replace('\\s+', ' ')\n\n### Other Normalizing steps\n\n# * Expand common abbreviations to their full form for better matching.\n# * removing common stop words that do not contribute significantly to the identification of a facility.\n# * Create a mapping for synonyms or variations in facility names to standardize them.\n# * Applies stemming to reduce words to their base or root form and removes common English stop words.\n# * Optionally, perform spell checking to correct common typos or misspellings.\n\n# Replace\n\ndf['facility_name'] = df['facility_name'].replace({' H ': ' Hospital '}, regex=True)\n\nstop_words = set(stopwords.words('english'))\ndf['facility_name'] = df['facility_name'].apply(lambda x: ' '.join([word for word in x.split() if word.lower() not in stop_words]))\n\n# Replace synonyms with a common names\n\nsynonym_mapping = {'HU': 'Health Unit'}\ndf['facility_name'] = df['facility_name'].replace(synonym_mapping, regex=True)\n\n# NLTK for stemming\n\nstemmer = PorterStemmer()\ndf['facility_name'] = df['facility_name'].apply(lambda x: ' '.join([stemmer.stem(word) for word in x.split()]))\n\n# Spellchecker\n\nspell = SpellChecker()\ndf['facility_name'] = df['facility_name'].apply(lambda x: ' '.join([spell.correction(word) for word in x.split()]))\n\n## Normalize GPS coordinates\n\n# This step ensures that coordinates are represented consistently and reduces noise.\n\n# * Round latitude and longitude to 6 decimal places for consistency.\n# * Check for missing or invalid coordinates and removing records with missing coordinates.\n# * Outlier Detection\n\n# Format latitude and longitude to a consistent number of decimal places\n\ndf['latitude'] = df['latitude'].round(6)\ndf['longitude'] = df['longitude'].round(6)\n\n# Drop rows with missing coordinates\n\ndf = df.dropna(subset=['latitude', 'longitude'])\n\n# Remove outliers based on a predefined threshold\n\nlatitude_threshold = (df['latitude'].quantile(0.01), df['latitude'].quantile(0.99))\nlongitude_threshold = (df['longitude'].quantile(0.01), df['longitude'].quantile(0.99))\n\ndf = df[(df['latitude'] &gt;= latitude_threshold[0]) &amp; (df['latitude'] &lt;= latitude_threshold[1])]\ndf = df[(df['longitude'] &gt;= longitude_threshold[0]) &amp; (df['longitude'] &lt;= longitude_threshold[1])]\n</code></pre>"},{"location":"index-old/","title":"NMCP Yemen Data Mapping Docs","text":""},{"location":"index-old/#shared-folder-layout","title":"Shared Folder Layout","text":"<pre><code>  \u251c\u2500\u2500\u2500master-data\\\n  \u2502       md_catchment_locations.csv\n  \u2502       md_chvs.csv\n  \u2502       md_districts.csv\n  \u2502       Updated md_health_facilities_south_north_column_.xlsx\n  \u2502\n  \u251c\u2500\u2500\u2500old-data-deprecated\\ # deprecated data files\n  \u251c\u2500\u2500\u2500other-data\\\n  \u2514\u2500\u2500\u2500routine-data\\\n  |   amd_movement_act_consumption.xlsx\n  \u2502   rd_chvs_monthly_data.csv\n  \u2502   rd_hfs_malaria_cases_2011_2023.csv\n  \u2502   rd_irs_data.csv\n  \u2502   rd_itns_data.csv\n  \u2502\n  \u2514\u2500\u2500\u2500entomology\\\n        \u2502   larval and adults exploration and investigation.xlsx\n        \u2502\n        \u2514\u2500\u2500\u2500Insecticide Resistance\\\n              Insecticide Resistance Monitoring Summaries.xlsx\n</code></pre>"},{"location":"index-old/#entities-relationships-diagram","title":"Entities Relationships Diagram","text":"<p>Relations between entities in the data files.</p> <p>Only the fields participating in a relationship from each side are included in each diagram.</p> <pre><code>erDiagram\n  MD_ADMINISTRATIVE_LEVEL ||--o{ MD-HEALTH-FACILITY : \"Has zero or more\"\n  MD_ADMINISTRATIVE_LEVEL {\n        int district_id\n  }\n  MD-HEALTH-FACILITY ||--o{ MD-CATCHMENT-LOCATION : Serves\n  MD-HEALTH-FACILITY ||--o{ MD-CHV : Supervises\n  MD-HEALTH-FACILITY ||--o{ RD-MALARIA-CASES-REPORT : submits\n  MD-HEALTH-FACILITY {\n        int district_id\n        int hf_code_link PK\n\n  }\n  MD-CATCHMENT-LOCATION {\n        int hf_code_link\n        string village_uid\n  }\n  MD-CHV ||--|{ RD-CHV-CASES-REPORT : submits\n  MD-CHV ||--|{ MD-CATCHMENT-LOCATION : Serves\n  MD-CHV {\n        int chv_id PK\n        int hf_code_link\n        string village_uid\n  }\n  RD-MALARIA-CASES-REPORT {\n        int hf_code_link\n  }\n  RD-CHV-CASES-REPORT {\n        int chv_id\n  }\n  MD-CATCHMENT-LOCATION ||--o{ ITN-REPORT : Has\n  MD-CATCHMENT-LOCATION ||--o{ IRS-REPORT : Has\n  ITN-REPORT {\n        string village_uid\n  }\n  IRS-REPORT {\n        string village_uid\n  }</code></pre>"},{"location":"index-old/#metadata-master-lists-folder","title":"metadata-master-lists Folder","text":"<p>Files in this folder contain the entities to which all the routine data can be linked using the IDs, an entity in its file is uniquely identified by the ID with no duplication except for the <code>md_catchment_locations.csv</code> master file.</p> <p>In Order for the Arabic letters to display correctly CSV files need to be imported in <code>UTF-8</code> unicode.</p>"},{"location":"index-old/#districts-file-md_districtscsv","title":"Districts File <code>md_districts.csv</code>","text":"<p>Administrative boundary datasets for levels 1, 2 (governorate, and district) for Yemen south and north, all master and routine data files have been unified to fully link to this file using the IDs <code>gov_id</code> or <code>district_id_unified_s_n</code>. The <code>district_id_nmcp</code> is the one used to link to the district level in shared shape file.</p> <ul> <li><code>gov_id</code> ID of the Governorate, uniquely identified by this id.</li> <li><code>district_id_nmcp</code> Shape's file ID of the District shared in with shape file.</li> <li><code>district_id_unified_s_n</code> ID of the District used in south Used in the south data. Introduced lately to data files too.</li> <li><code>gov_ar</code> Ar name of the Governorate to display correctly -&gt; UTF-8.</li> <li><code>district_ar</code> Ar name of the District to display correctly -&gt; UTF-8.</li> </ul>"},{"location":"index-old/#health-facilities-file-md_health_facilitiescsv","title":"Health Facilities File <code>md_health_facilities.csv</code>","text":"<ul> <li><code>gov_id</code>.</li> <li><code>district_id_nmcp</code>.</li> <li><code>district_id_unified_s_n</code>.</li> <li><code>hf_code_link</code> ID of the Health Facility North data files code.</li> <li><code>health_facility_uid</code> UID of the Health Facility Ignore it.</li> <li><code>hf_name</code> to display correctly -&gt; UTF-8, since we merged from multiple sources they contains names in different languages but each is unique.</li> <li><code>hf_type</code>.</li> <li><code>hf_owner</code>.</li> <li><code>longitude</code>.</li> <li><code>latitude</code>.</li> <li><code>elevation</code>.</li> </ul> <p>Additional Fields <code>brought from other tables</code></p> <ul> <li><code>catchments_count</code> Catchments localities count.</li> <li><code>chvs_count</code> Number of CHVs belonging to this Health Facility if there are any.</li> <li><code>chvs_confirmed_2018</code>, <code>chvs_confirmed_2019</code> ... <code>chvs_confirmed_2022</code> Confirmed Malaria Cases Yearly summary of malaria cases reported by the CHVs supervised by this HF.</li> <li><code>hfs_confirmed_2013</code>, <code>hfs_confirmed_2019</code>, ..., <code>hfs_confirmed_2022</code> HFs Confirmed Malaria Cases Yearly summary of malaria cases reported by this Health Facility.</li> <li><code>ACT_consumption_2020</code>, <code>ACT_consumption_2021</code> ... <code>ACT_consumption_2022</code>: will be calculated when AMD data is shared.</li> <li><code>served_population_2022</code> served population in all levels of catchments localities.</li> </ul> <p>Additional fields brought from other files, I just use them with other calculations (sometime other meaningless variables) to automatically verify changes or to quickly filter where we are actually active.</p>"},{"location":"index-old/#catchment-localities-file-md_catchment_locationscsv","title":"Catchment Localities File <code>md_catchment_locations.csv</code>","text":"<ul> <li><code>mapping_status</code> Indicates whether the location is mapped to a health facility in the <code>md_health_facilities.csv</code> master file or not, with <code>1</code> indicating a mapped location and a <code>blank</code> indicating an unmapped location.</li> <li><code>gov_id</code> ID of the Governorate.</li> <li><code>district_id_nmcp</code>.</li> <li><code>district_id_unified_s_n</code>.</li> <li><code>hf_code_link</code>: locations that are not mapped to a health facility in the north i.e. with <code>mapping_status = blank</code> have been given a temporary ID in the form of <code>district_id + 900 or &gt;900</code>.</li> <li><code>health_facility_uid</code>.</li> <li><code>level</code> Accessibility level to the health facility, with <code>1</code> indicating the easiest accessibility and <code>3</code> the hardest.</li> <li><code>urban_rural</code> Urban or Rural, old ids replaced by labels.</li> <li><code>settlement</code> Type of location, such as village, subvillage, island, etc same as before.</li> <li><code>pop2004</code> Population 2004.</li> <li><code>pop2022</code> Population 2022.</li> </ul>"},{"location":"index-old/#chvs-file-md_chvscsv","title":"CHVs File <code>md_chvs.csv</code>","text":"<ul> <li><code>chv_id</code>.</li> <li><code>hf_code_link</code>.</li> <li><code>health_facility_uid</code> ignore it.</li> </ul>"},{"location":"index-old/#routine-data-folder","title":"routine-data Folder","text":""},{"location":"index-old/#itns-data-2018-2022-rd_itns_datacsv","title":"ITNs Data 2018 - 2022 <code>rd_itns_data.csv</code>","text":"<ul> <li><code>sn</code> in case it is needed to link any data related to this record later like IDPs Camps GPS.</li> <li><code>year</code> Year planned.</li> <li><code>started</code> Year-Month started.</li> <li><code>village_uid</code></li> <li><code>day</code></li> <li><code>houses_2022</code> this variable were introduced to the data from 2022.</li> <li><code>res</code> Residents.</li> <li><code>idps</code></li> <li><code>pop_m</code> Male Population</li> <li><code>pop_f</code> Female Population</li> <li><code>less_5_m</code> &lt; 5y Male</li> <li><code>less_5_f</code> &lt; 5y Female</li> <li><code>preg_wmn</code> pregnant women</li> <li><code>bnets</code> Bed nets distributed</li> <li><code>Is IDPs Camp</code> <code>1</code> is an IDPs Camp, IDPs camps have a general code for all based on the district won't link to a catchment locality currently but we will look into it and specify within what catchment locality later.</li> </ul>"},{"location":"index-old/#irs-data-rd_irs_datacsv","title":"IRS Data <code>rd_irs_data.csv</code>","text":"<ul> <li><code>sn</code> in case it is needed to link any data related to this record later like IDPs Camps GPS.</li> <li><code>year</code> Year planned.</li> <li><code>started</code> Year-Month started.</li> <li><code>village_uid</code>.   ...</li> <li><code>Is IDPs Camp</code> <code>1</code> is an IDPs Camp, IDPs camps have a general code for all based on the district won't link to a catchment locality currently but we will look into it and specify within what catchment area later.</li> </ul> 2019 2020 2022 Population House Hold Houses sprayed = <code>Full spray</code> + <code>Partial spray</code> Houses non-sprayed = <code>Closed</code> + <code>Refused</code> Total Houses = <code>sprayed</code> + <code>non-sprayed</code> houses Full spray Partial spray Rooms sprayed Rooms non-sprayed Total No of rooms No. of workers Closed Refused"},{"location":"index-old/#amd-consumption-amd_movement_summary_act_consumption_sharedxlsx","title":"AMD Consumption <code>amd_movement_summary_act_consumption_shared.xlsx</code>","text":"<p>The same file I shared previously, removed (received, remaining...)  columns to not clutter the main point and just calculated the consumption and restructured it in this new form.</p> <ul> <li><code>gov_id</code>, <code>district_id_nmcp</code>, <code>district_en</code>, <code>hf_name</code>, <code>hf_code_link</code>.</li> <li><code>consumed_ACT</code></li> <li><code>consumption_from_week</code> : Start of consumption period.</li> <li><code>consumption_to_week</code> End of consumption period.</li> <li><code>total_confirmed_cases</code> Total reported confirmed cases in eIDEWS routine data within the same consumption period summed up from the available reports in routine data. <code>Blank</code> cells means the Hf has no case reported in eIDEWS for the this consumption period.</li> <li><code>available_cases_data_in_eidews_from_week</code> Start of available routine data period. If it starts later than the start of consumption period the difference is missing weeks in routine data. <code>Blank</code> cells means the Hf has no case reported in eIDEWS for the this consumption period.</li> <li><code>available_cases_data_in_eidews_to_week</code> End of available routine data period. If it ends earlier than the end of consumption period the difference is missing weeks in routine data. <code>Blank</code> cells means the Hf has no case reported in eIDEWS for the this consumption period.</li> <li><code>hf_has_catchment_localities</code> <code>1</code> If the hf has a catchment in the catchment file, <code>blank</code> or <code>0</code> if it has no catchment.</li> </ul> <p>The consumption periods between 2019 and 2022 are consecutive and have no gaps. in the Health facilities we supply with AMDs data in this file can be considered more reliable than the eIDEWS' cases routine data. Occasionally, there may be instances where the number of eIDEWS' cases exceeds the amount of consumption, which may be due to a shortage of supplies. Although this occurs infrequently, The majority of the consumption reports are from the most critical areas where malaria is prevalent.</p> <p>If necessary, I can include any other relevant info and modify the structure of the report as per request.</p>"},{"location":"index-old/#entomology-data","title":"Entomology data","text":"<p>There are more data collected from the field, needs to be organized and linked to each other.</p>"},{"location":"shared-data-status/","title":"Final Status oF the Shared Data","text":"<p>as of June, 24 2023 before our last meeting, nothing changed, the documentation may keep changing, the shared data will stay the same unless requested to change something.</p>"},{"location":"shared-data-status/#mapping-status","title":"Mapping status","text":"<p>The following table shows NORTH/SOUTH Health Facilities that have some data in the north files and needs either be mapped to catchments localities or locate their GPS coordinate:</p> <p> Final Health Facilities Mapping &amp; GPS status</p> hf_owner - WITH NO CATCHMENTS WITH NO CATCHMENT &amp; GPS WITH NO GPS OTHER 292 PRIVATE 574 111 PUBLIC 4692 848 291 1 <p>There are currently 118234 120982 locations in total, of which 105855: 89% 110898: 91% have been mapped to a health facility in the <code>md_health_facilities.csv</code> master file.</p> <p> Final CMs Mapping status</p> S/N gov_id gov % MAPPED UNMAPPED NORTH 11 Ibb 16497 NORTH 17 Hajjah 14416 NORTH 20 Dhamar 14219 NORTH/SOUTH 18 Al Hudaydah 9508 NORTH 23 Sana'a 7504 1 NORTH 22 Sa'ada 6992 NORTH 31 Raymah 6766 NORTH 29 Amran 6421 NORTH 16 Al Jawf 2650 NORTH 27 Al Mahwit 4788 29 NORTH/SOUTH 26 Marib 2181 213 NORTH 13 Amanat Al Asimah 5736 773 NORTH/SOUTH 15 Taizz 9574 9068 NORTH/SOUTH 14 Al Bayda 3646"},{"location":"shared-data-status/#join-status-between-reports-and-catchments","title":"Join status between reports and catchments","text":""},{"location":"shared-data-status/#itns-reports-rd_itns_datacsv-md_catchment_locationscsv","title":"ITNs Reports <code>rd_itns_data.csv</code> \u2192 <code>md_catchment_locations.csv</code>","text":"<p> Final ITN's Records Mapping status </p> Total linked unlinked (IDPs Camps) unlinked Other 50735 records 49806 155 774"},{"location":"shared-data-status/#irs-reports-rd_irs_datacsv-md_catchment_locationscsv","title":"IRS Reports <code>rd_irs_data.csv</code> \u2192 <code>md_catchment_locations.csv</code>","text":"<p>  Final IRS Records Mapping status </p> <p> After IRS 2022 data was Included </p> Total linked unlinked (IDPs Camps) unlinked Other 41108 records 39791 154 1163"},{"location":"dashboards/","title":"Campaign Dashboard notes","text":""},{"location":"dashboards/#irs-dashboard-brainstorming-ideas","title":"IRS Dashboard, brainstorming ideas","text":"<ol> <li> <p>Overall Campaign Progress:</p> </li> <li> <p>Total Villages Covered vs. Planned: Display the number of villages where spraying has been completed versus the total planned.</p> </li> <li>Total Houses Sprayed vs. Planned: Show the number of houses sprayed to date compared to the planned number.</li> <li>Coverage Rate: Percentage of houses sprayed out of the total planned.</li> <li>Insecticide Utilization: Track the amount of insecticide used versus the planned amount, based on area/room metrics.</li> <li>Refusal Rate: Percentage of houses that refused spraying.</li> <li>Heatmap of high/low coverage or refusal rates across locations</li> <li> <p>Flags any emerging issues like high refusal rates or insecticide shortages.</p> </li> <li> <p>Operational efficiency:</p> </li> <li> <p>Average houses sprayed per day per team: Track the speed and efficiency of each team.</p> </li> <li>Time taken to complete each location: Identify locations that take longer and investigate potential reasons.</li> <li>Unsprayed locations: Analyze the reasons for not spraying locations (refusal, closed houses, etc.).</li> <li> <p>Allows for comparisons and identification of best practices</p> </li> <li> <p>Daily Progress Tracking:</p> </li> <li> <p>Daily Targets vs. Achieved: Graphical representation (e.g., line or bar chart) showing daily goals versus actual accomplishments to track the pace of the campaign.</p> </li> <li> <p>Coverage Rate: Percentage of households visited versus those planned for each day/week.</p> </li> <li> <p>Data quality and completeness:</p> </li> <li>Data consistency: Check for inconsistencies and errors in reported data (e.g., population exceeding house capacity).</li> <li>Number of missing reports:</li> <li> <p>Timeliness of report submission: Track the average time taken for teams to submit reports after each spraying day.</p> </li> <li> <p>Additional Considerations:</p> </li> <li> <p>Filter and drill down: Allow users to filter data by team, location, day, and other relevant criteria.</p> </li> <li> <p>Compare with historical data: If available, compare campaign performance with previous campaigns to identify trends and improvements.</p> </li> <li> <p>Report Generation:</p> </li> <li> <p>I can help you generate reports that summarize campaign performance, identify areas for improvement, and support data-driven decision-making. These reports could include:</p> </li> <li>Campaign summaries: Completion rates, insecticide usage, population covered.</li> <li>Team performance reports: Houses sprayed, insecticide used, reasons for non-spraying.</li> <li>Regional analysis: Coverage achieved, challenges faced in different regions.</li> </ol>"},{"location":"database/","title":"DB","text":""},{"location":"database/#irs-database-structure-documenting","title":"IRS Database structure documenting","text":"<p>The provided SQL schema outlines a database structure designed to support the management and tracking of National Malaria Control Program (NMCP) campaigns such as ITNs, IRS, AMD and other. Here's a detailed description of the database schema based on the revised comments:</p>"},{"location":"database/#overview","title":"Overview","text":"<p>The schema is organized to facilitate the planning, execution, and reporting of malaria control campaigns. It encompasses various aspects of these campaigns, including:</p>"},{"location":"database/#key-components","title":"Key Components","text":"<ol> <li> <p>Campaign Information (<code>m_campaign</code>): This table is central to the schema, categorizing each campaign by type (e.g., IRS or ITNs), year, and other identifying details. It enables the tracking of multiple, simultaneous campaigns.</p> </li> <li> <p>Locations (<code>m_villages_locations</code>): A comprehensive list of all potential target locations within the country, which can be selected during campaign planning. This table serves as a reference for planning and reporting, without being directly tied to a specific campaign.</p> </li> <li> <p>Regions (<code>c_region</code>): Specifically for IRS campaigns, regions are defined to streamline planning and resource allocation. Each region can encompass multiple locations and is associated with a specific campaign.</p> </li> <li> <p>Warehouses/Distribution Points (<code>c_warehouses_distribution_points</code>): Identified locations where campaign materials (pesticides for IRS or nets for ITNs) are stored and from where they are distributed to operational teams. These points are crucial for logistical planning.</p> </li> <li> <p>Teams (<code>c_team</code>): Details about the teams conducting the spraying or net distribution, including the differentiation between foremen (team leaders) and supervisors for reporting and operational clarity.</p> </li> <li> <p>Targets (<code>c_targets_master</code>): Planned locations that will be targeted in a certain campaign are stored in this table detailing which the Regions and Wh/distribution points withing each region.</p> </li> <li> <p>Daily Targets (<code>c_daily_targets</code>): Operational plans detailing which teams are assigned to which targeted-location on specific days, including estimates of population, housing, and the resources required to achieve campaign goals.</p> </li> <li> <p>Data Collection and Reporting (<code>c_kobo_irs_team_main</code>): Captures detailed reports from the field, including outcomes of daily operations, reasons for any deviations from the plan, and GPS data for verification purposes.</p> </li> </ol>"},{"location":"database/#purpose-and-utility","title":"Purpose and Utility","text":"<p>This schema is designed to support comprehensive tracking and management of NMCP campaigns, facilitating data-driven decision-making and operational efficiency. By structuring data around campaigns, locations, teams, and logistics, the schema provides a solid foundation for monitoring progress, evaluating impact, and planning future campaigns. It allows for detailed reporting and analysis, which are crucial for adjusting strategies, ensuring resource availability, and achieving the overall goal of malaria control and eradication.</p>"},{"location":"database/#operational-planning","title":"Operational planning","text":"<p>A campaign starts in <code>campaign_start_date</code> and takes specified <code>campaign_days</code>, Consecutive.</p> <p>In planning phase before the campaign:</p> <ul> <li>Campaign Start date is determined.</li> <li>Locations that will be targeted and sprayed are Specified from <code>m_villages_locations</code>.</li> <li>Targeted locations are divided and grouped as multiple Regions and within each region into one or more WH-distribution-Point and this info is placed in <code>c_targets_masters</code> table.</li> <li>the number of required teams are determined and the daily operational plan is planned and <code>c_daily_targets</code> table is populated.</li> </ul> <p>Important variables set during planning:</p> <ul> <li><code>c_daily_targets.target_houses</code>: locations total Houses.</li> <li><code>c_daily_targets.target_room_per_house</code>: Estimated AVG Rooms per house.</li> <li><code>c_daily_targets.target_room_avg_area</code>: a Room Estimated AVG Area.</li> <li><code>c_daily_targets.target_daily_area_coverage_rate</code>: Estimated Daily Area coverage Rate per worker.</li> <li><code>m_campaign.campaign_days</code>: the Campaign\u2019s number of days <code>IRS usually planned = 11 days, and ITNs = 6 days</code>.</li> <li><code>c_daily_targets.target_area_per_sachet</code>: Estimated Area Covered per sachet of pesticide is Known <code>usually = 250</code>.</li> <li><code>c_team.team_no_of_team_workers</code>: number of team's spraying workers.</li> </ul> <p>In the daily Operational plan table A team will cover multiple locations for N-days</p> <p>Important calculations:</p> <ul> <li>Estimated Rooms Target = c_daily_targets.target_houses x c_daily_targets.target_houses.</li> <li>Estimated Area Target = Estimated Rooms Target x c_daily_targets.target_room_avg_area.</li> <li>Estimated Pesticide sachets Required = Estimated Area Target / c_daily_targets.target_area_per_sachet.</li> <li>Estimated daily area coverage rate per worker = c_kobo_irs_team_main.report_rooms_sprayed_entered x c_daily_targets.target_room_avg_area</li> </ul> <p>Important meanings and terminology for progress_status:</p> <p>When Estimating futures of any thing progress_status is usually need to be taken into account:</p> <ul> <li>for <code>progress_status</code> in  of each sent report:</li> <li><code>full</code>: activity completed in this target with full coverage.</li> <li><code>partial</code>: activity completed in this target with partial coverage.</li> <li><code>ongoing</code>: activity still not completed yet.</li> <li><code>NotTargeted, the reason</code>: activity still not completed yet.</li> </ul>"},{"location":"database/#the-database-tables-sql-creation","title":"The Database tables SQL creation","text":"<pre><code>-- `m_campaign`: Stores information about each campaign. It supports multiple types of campaigns (e.g., ITNs with `campaign_type_id`=1, IRS with `campaign_type_id`=2), allowing the database to track various intervention strategies.\n\nCREATE TABLE \n    m_campaign \n    ( \n        campaign_code         CHARACTER VARYING(64) NOT NULL, \n        campaign_start_date TIMESTAMP(6) WITHOUT TIME ZONE, -- the date the campaign will start\n        campaign_days         INTEGER, -- no of campaigns days the campaign is going to take from campaign_start_date.\n        campaign_type_id      INTEGER NOT NULL, \n        campaign_id           BIGINT DEFAULT nextval('m_campaign_campaign_serial_seq'::regclass) \n        NOT NULL, \n        campaign_note CHARACTER VARYING(255), \n\n        PRIMARY KEY (campaign_id), \n        CONSTRAINT campaign_type_fk FOREIGN KEY (campaign_type_id) \n        REFERENCES \"m_campaigntypes\" (\"campaign_type_id\"), \n        UNIQUE (campaign_code)\n    );\n\n-- `m_villages_locations`: Catalogs potential target locations across the country. Selections for specific campaigns are made during planning and are utilized in tables like `daily_targets` and for reporting in `c_kobo_irs_team_main` and `c_kobo_itns_team_main`.\n\nCREATE TABLE m_villages_locations\n(\n    location_id                BIGINT DEFAULT nextval('location_id_serial_seq'::regclass) NOT NULL,\n    location_district_id     BIGINT NOT NULL,\n    location_ppc_code          BIGINT NOT NULL,\n    location_subdistrict_name  CHARACTER VARYING(255),\n    location_village_name      CHARACTER VARYING(255),\n    location_subvillage_name   CHARACTER VARYING(255),\n    location_longitude         DOUBLE PRECISION,\n    location_latitude          DOUBLE PRECISION,\n    CONSTRAINT villages_locations_pkey PRIMARY KEY (location_id),\n    CONSTRAINT villages_locations_district_id_fk FOREIGN KEY (location_district_id) \n    REFERENCES \"m_districts\" (\"district_id\"),\n    CONSTRAINT villages_locations_ppc_code_ux UNIQUE (location_ppc_code)\n);\n\n-- `c_region`: Defines regions for IRS campaigns, where each encompasses multiple locations. These regions are used for logistical planning, including warehouse/distribution point assignments and team management. The structure supports nested regions through warehouse and team assignments. For IRS campaigns only, regions are defined in this table, each linked to a specific campaign.\n\nCREATE TABLE c_region\n(\n    region_id          BIGINT DEFAULT nextval('c_region_serial_seq'::regclass) NOT NULL,\n    region_name        CHARACTER VARYING(255),\n    region_head        CHARACTER VARYING(255),\n    region_notes       CHARACTER VARYING(255),\n    region_campaign_id BIGINT NOT NULL,\n    region_name_en     CHARACTER VARYING(255),\n    region_number      INTEGER NOT NULL,\n    PRIMARY KEY (region_id),\n    CONSTRAINT c_region_campaign_id_fk FOREIGN KEY (region_campaign_id) \n    REFERENCES \"m_campaign\" (\"campaign_id\")\n);\n\n-- `c_warehouses_distribution_points`: Lists distribution points for both ITNs and IRS campaigns, indicating where resources are staged for distribution to teams. ITNs campaigns do not use regional divisions, hence `wh_region_id` can be null for them.\n\nCREATE TABLE c_warehouses_distribution_points\n(\n    wh_id              BIGINT DEFAULT nextval('c_warehouses_serial_seq'::regclass) NOT NULL,\n    wh_name            CHARACTER VARYING(255),\n    wh_description     CHARACTER VARYING(255),\n    wh_gps_coordinate  CHARACTER VARYING(255),\n    wh_campaign_id     BIGINT,\n    wh_region_id       BIGINT,\n    CONSTRAINT c_warehouses_pkey PRIMARY KEY (wh_id),\n    CONSTRAINT wh_campaign_id_fk FOREIGN KEY (wh_campaign_id) \n    REFERENCES \"m_campaign\" (\"campaign_id\"),\n    CONSTRAINT wh_region_id_fk FOREIGN KEY (wh_region_id) \n    REFERENCES \"c_region\" (\"region_id\")\n);\n\n-- `c_team`: Represents teams tasked with either spraying (IRS), including team leaders and supervisors. The crucial team_type field differentiates between foreman teams directly involved in spraying and supervisor teams overseeing multiple foreman teams and consolidating their reports. it has either [FOREMAN, SUPERVISOR].\n\nCREATE TABLE c_team\n(\n    team_id            BIGINT DEFAULT nextval('c_team_new_serial_seq'::regclass) NOT NULL,\n    team_contact_person TEXT,\n    team_wh_id         BIGINT NOT NULL,\n    team_number        BIGINT NOT NULL,\n    team_type          team_type, \n    team_no_of_team_workers   INTEGER, -- Team No of workers\n    CONSTRAINT c_team_new_pkey PRIMARY KEY (team_id),\n    CONSTRAINT c_team_wh_id_fk FOREIGN KEY (team_wh_id) \n    REFERENCES \"c_warehouses_distribution_points\" (\"wh_id\")\n);\n\n-- `c_targets_master`: \n\n-- `c_daily_teams_targets`: \n-- This table defines the operational plan for each day within an IRS campaign.\n-- Key points:\n-- * Estimated values based on planning, actual execution details in `c_kobo_irs_team_main`.\n-- * Divergences from planned teams/dates captured in `c_kobo_irs_team_main`.\n-- * Multiple reports per target on different days possible in `c_kobo_irs_team_main`.\n-- * Progress tracking: Latest report's progress_status is considered for progress tracking.\n\n-- Fields:\n\n-- * target_team_id: The team assigned to the target for this day. (FK to c_team)\n-- * target_day_date_id: The date ID for the planned spraying day. (FK to m_date_dimension)\n-- * target_population (optional): Estimated population of the target location.\n-- * target_houses: Estimated number of houses in the target location.\n-- * target_room_per_house: Estimated number of rooms per house in the target location.\n-- * target_room_avg_area: Estimated area per room.\n--     Used to estimate total area requiring insecticide coverage.\n-- * target_daily_area_coverage_rate: Estimated daily area coverage rate per worker.\n--     in a day. Used to assess workload and monitor progress.\n-- target_area_per_sachet: Estimated Area covered Per Sachet.\n\nCREATE TABLE \n    c_daily_teams_targets \n    ( \n        target_id   BIGINT DEFAULT nextval('c_daily_team_targets_target_id_seq'::regclass) NOT NULL, \n        target_warehouse_id BIGINT NOT NULL, \n        target_location_id  BIGINT NOT NULL, \n        target_region_id    BIGINT, \n        target_field_code   BIGINT NOT NULL, \n        target_team_id      BIGINT NOT NULL, \n        target_day_date_id  INTEGER NOT NULL, \n        target_population DOUBLE PRECISION, \n        target_houses DOUBLE PRECISION, \n        target_room_per_house           NUMERIC, \n        target_room_avg_area            NUMERIC, \n        target_daily_area_coverage_rate INTEGER, \n        target_area_per_sachet          INTEGER, \n        location_longitude DOUBLE PRECISION, \n        location_latitude DOUBLE PRECISION, \n        target_campaign_id BIGINT, \n        PRIMARY KEY (target_id), \n        CONSTRAINT fk_target_location_id FOREIGN KEY (target_location_id) REFERENCES \n        \"m_villages_locations\" (\"location_id\"), \n        CONSTRAINT fk_target_region_id FOREIGN KEY (target_region_id) REFERENCES \"c_region\" \n        (\"region_id\"), \n        CONSTRAINT fk_target_warehouse_id FOREIGN KEY (target_warehouse_id) REFERENCES \n        \"c_warehouses_distribution_points\" (\"wh_id\"), \n        CONSTRAINT fk_target_team_id FOREIGN KEY (target_team_id) REFERENCES \"c_team\" (\"team_id\"), \n        CONSTRAINT fk_target_day_date_id FOREIGN KEY (target_day_date_id) REFERENCES \n        \"m_date_dimension\" (\"date_id\"), \n        CONSTRAINT fk_target_campaign_id FOREIGN KEY (target_campaign_id) REFERENCES \"m_campaign\" \n        (\"campaign_id\"), \n        UNIQUE (target_id), \n        CONSTRAINT c_daily_teams_wh_code_team_day_multiple_u UNIQUE (target_warehouse_id, \n        target_team_id, target_day_date_id, target_field_code), \n        CONSTRAINT c_daily_teams_camp_code_team_day_multiple_u UNIQUE (target_field_code, \n        target_team_id, target_day_date_id, target_campaign_id) \n    );\n\n-- `c_kobo_irs_team_main`:\n-- This table captures detailed field reports submitted by spray teams during IRS campaigns.\n-- It provides granular data on sprayed households, insecticide usage, and coverage per house.\n\n-- Fields:\n\n-- * _id: Unique identifier for the report.\n-- * _uuid: Unique identifier for the data submission.\n-- * _submission_time: Timestamp when the report was submitted.\n-- * progress_status: One of \"full\", \"ongoing\", \"partial\", \"rejected\", \"displaced\", \"war_zone\", or \"non_sprayed_for_reason\".\n-- * report_unspray_reason (optional): Reason for non-spraying if\n--     progress_status is \"non_sprayed_for_reason\".\n-- * report_completeness_note: comment for any progress_status chosen coverage.\n-- * report_tl_comment: team leader other comments.\n-- * target_id: FK to the target location in `c_targets_master`.\n-- * report_team_id: The team that covered the location and submitted the report.\n--     (FK to c_team)\n-- * day_date_id: The date the spraying occurred.\n-- * report_houses_total_entered: Total number of houses visited.\n-- * report_houses_sprayed_entered: Number of houses sprayed out of total visited.\n-- * report_houses_nonsprayed_entered: Number of houses not sprayed out of total visited.\n-- * report_houses_refused_entered: Number of houses that refused spraying.\n-- * report_houses_closed_entered: Number of houses that were closed.\n-- * report_population_in_sprayed_entered: Estimated population in sprayed houses.\n-- * report_rooms_total_entered: Total number of rooms in visited houses.\n-- * report_rooms_sprayed_: Total number of rooms sprayed from total rooms.\n-- * report_rooms_nonsprayed_entered: Total number of rooms non-sprayed from total rooms.\n-- * report_total_sachets_entered: pesticides sachets consumed.\n\nCREATE TABLE c_kobo_irs_team_main\n(\n    _id                           BIGINT NOT NULL,\n    _uuid                         CHARACTER VARYING(255) NOT NULL,\n    _submission_time              TIMESTAMP(6) WITHOUT TIME ZONE, \n    progress_status               CHARACTER VARYING(255) NOT NULL,\n    report_unspray_reason         CHARACTER VARYING(2000),\n    report_tl_comment         CHARACTER VARYING(2000),\n    report_other_unspray_reason         CHARACTER VARYING(2000),\n    report_reason_not_return         CHARACTER VARYING(2000),\n    report_completeness_note         CHARACTER VARYING(2000),\n    target_id                   BIGINT NOT NULL,\n    report_team_id            BIGINT NOT NULL, \n    day_date_id                   INTEGER NOT NULL,\n    report_houses_total_entered   INTEGER,\n    report_houses_sprayed_entered INTEGER,\n    report_houses_nonsprayed_entered INTEGER, \n    report_houses_refused_entered INTEGER, \n    report_houses_closed_entered  INTEGER,\n    report_population_in_sprayed_entered INTEGER,\n    report_rooms_total_entered    INTEGER, \n    report_rooms_sprayed_entered  INTEGER, \n    report_rooms_nonsprayed_entered INTEGER, \n    report_total_sachets_entered  INTEGER, \n    report_captured_gps           CHARACTER VARYING(255), \n    _database_created_at          TIMESTAMP(6) WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    CONSTRAINT c_kobo_irs_team_main_2_pkey PRIMARY KEY (_id),\n    CONSTRAINT c_irs_kobo2_day_date_id_fk FOREIGN KEY (day_date_id) REFERENCES \"m_date_dimension\" (\"date_id\"),\n    CONSTRAINT c_irs_kobo2_target_id_fk FOREIGN KEY (target_id) REFERENCES \"c_daily_teams_targets\" (\"target_id\"),\n    CONSTRAINT c_irs_kobo2_team_id_fk FOREIGN KEY (report_team_id) REFERENCES \"c_team\" (\"team_id\"),\n    CONSTRAINT c_irs_kobo_kobo2_uuid_u UNIQUE (_uuid)\n);\n\n-- Note: This is the crucial tables, additional tables are implied but not listed here for brevity.\n</code></pre>"}]}